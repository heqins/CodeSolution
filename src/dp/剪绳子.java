package dp;

public class 剪绳子 {

    /**
     * 给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n>1并且m>1），每段绳子的长度记为 k[0],k[1]...k[m-1] 。
     * 请问 k[0]*k[1]*...*k[m-1] 可能的最大乘积是多少？例如，当绳子的长度是8时，
     * 我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。
     */
    public int cuttingRope(int n) {
        int[] dp = new int[n + 1];
        // dp数组记录从0到n长度的绳子剪掉后的最大乘积
        dp[2] = 1;

        // 从长度为3开始剪
        for (int i = 3; i <= n; i++) {
            // 只剪掉长度为1，对最后的乘积无任何增益，所以从长度为2开始剪
            // 第一段长度j可以取的区间为[2,i)
            for (int j = 2; j < i; j++) {
                // 剪了第一段后，剩下(i - j)长度可以剪也可以不剪。如果不剪的话长度乘积即为j * (i - j)
                dp[i] = Math.max(dp[i], Math.max((i - j) * j, dp[i - j] * j));
            }
        }

        return dp[n];
    }
}
