package greedy;

public class 买卖股票的最佳时机2_1 {

    /**
     * 给你一个整数数组 prices ，其中 prices[i] 表示某支股票第 i 天的价格。
     * 在每一天，你可以决定是否购买和/或出售股票。你在任何时候 最多 只能持有 一股 股票。你也可以先购买，然后在 同一天 出售。
     * 返回 你能获得的 最大 利润 。
     * @param args
     */
    public static void main(String[] args) {
        int[] prices = new int[]{7,1,5,3,6,4};
        System.out.println(solve(prices));
    }

    /**
     * 关注每天的正利润
     * @param prices
     * @return
     */
    public static int solve(int[] prices) {

        // 这种做法的思路是基于贪心算法，其核心观点是：只要今天的股票价格比昨天高，就在昨天买入并在今天卖出，以获取利润。这是因为在允许多次买卖的情况下，我们希望能够利用价格的每一次上涨来获得额外的利润。
        //
        //这个方法之所以有效，原因如下：
        //
        //贪心策略：该算法采用了一种贪心的策略，即在每次交易时都采取能够获得即时利润的最优决策。它不会等待未来更高的价格，而是专注于当前的价格趋势。
        //
        //多次交易：该算法允许多次买卖，因此可以充分利用价格波动。每次涨价都会增加总利润，而每次跌价都不会对总利润造成损失。
        //
        //时间复杂度低：算法只需一次遍历价格数组，因此时间复杂度为O(n)，其中n是价格数组的长度。这使得它在处理大规模数据时非常高效。
        //
        //总的来说，这种方法有效是因为它通过贪心策略，不断地买入低价股票并卖出高价股票，以最大化总利润。这是一种经典的股票交易问题解决方法，适用于多次买卖的情况。
        int result = 0;
        // 这个不是一次性的买卖，可以操作多次
        for (int i = 1; i < prices.length; i++) {
            result += Math.max(prices[i] - prices[i - 1], 0);
        }

        return result;
    }
}
